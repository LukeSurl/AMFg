      PROGRAM CONVERT2VERTICAL

C-------------------------------------------------------------------------
C This code will read the slant column and cloud observations, 
C find the corresponding 3-d 
C chemistry trace gas profile and surface pressure, read in the
C surface albedo information and use this information to compute 
C the air mass factor (AMF) used to convert the Satellite 
C slant columns to vertical columns.
C-------------------------------------------------------------------------

      ! C Preprocessor #define statements for conditional compilation
#     include "define.h"

      ! References to F90 modules
      USE BPCH2_MOD
      USE ParameterModule
      USE CMN_SIZE_MOD
      USE satellite_IO

#if defined(USELUT)
      USE MAmfLut
#endif

      IMPLICIT NONE

C  LIDORT input variables
#     include "include_s/LIDORT.PARS"
#     include "include_e/LIDORT_L.PARS"
#     include "include_s/LIDORT_CONTROL.VARS"
#     include "include_s/LIDORT_MODEL.VARS"
#     include "include_s/LIDORT_GEOPHYS.VARS"
#     include "include_e/LIDORT_L_CONTROL.VARS"


C=========================================================================
C
C   Variable Declarations
C
C=========================================================================

C-------------------------------------------------------------------------
C Inputs from run script
C-------------------------------------------------------------------------
      CHARACTER(LEN=255) :: SATFILE       ! File containing satellite geometry
      CHARACTER(LEN=255) :: CLDFILE       ! File containing cloud data
      INTEGER DAYNO                       ! Day of Month
      CHARACTER(LEN=255) :: TG_FILE       ! File containing trace gas profile (GEOS-Chem)
      CHARACTER(LEN=255) :: AEROSOL_FILE  ! File containing aerosol profile (GEOS-Chem)
      CHARACTER(LEN=255) :: TROPO_FILE    ! File containing tropopause heights (GEOS-Chem)
      CHARACTER(LEN=255) :: OUTFILE       ! Output file for AMFs
      CHARACTER(LEN=255) :: OUTFILE_WSCAT ! Output file for scattering weights
      CHARACTER(LEN=255) :: OUTFILE_Shape ! Output file for profile shapes
      INTEGER YR
      INTEGER MONTH
      INTEGER TG_TYPE           ! 0 = HCHO, 1 = NO2
      INTEGER FRESCOv5          ! 1 if True

C------------------------------------------------------------------------
C Loop Indices
C------------------------------------------------------------------------
      INTEGER I, J, L, J00, N
      INTEGER LINE
      INTEGER LEV

C-------------------------------------------------------------------------
C Binary punch file stuff
C-------------------------------------------------------------------------
      REAL*8             :: TAU_IN       ! Time stamp for GEOS-Chem files
      INTEGER            :: TRACER_IN    ! Tracer number in diag51.f (GEOS-Chem)
      CHARACTER(LEN=40)  :: CATEGORY_IN  ! (GEOS-Chem)

      INTEGER :: IND(NAER)  !Tracer numbers for each aerosol type (NAER set=5 in CMN_SIZE)
      DATA IND /4, 6, 9, 12, 15/  ! (4=dust,6=SO4,9=BC,12=OC,15=SSa,18=SSc)
      REAL*8  :: TG(IIPAR,JJPAR,LLPAR)         !Trace gas mixing ratio
      REAL*8  :: ARSL(IIPAR,JJPAR,LLPAR,NAER)  ! Aerosol optical depth
      REAL*8  :: ALBD(IIPAR_ALB,JJPAR_ALB)     !Surface reflectivity
      REAL*8  :: PS(IIPAR,JJPAR)               !Surface pressure
      REAL*8  :: TMP(IIPAR,JJPAR,LLPAR)        !Temperature
      REAL*8  :: FRCLND(IIPAR,JJPAR)           !Fraction of grid occupied by land
      REAL*8  :: TRPAUSE(IIPAR,JJPAR)          !Tropopause level
      REAL*8  :: GEOS_VC(NVALMAX) !Vertical Column in the GEOS-CHEM model

C Arrays to store temporary values read from BPCH files
      REAL*4  :: ARRAY(IIPAR,JJPAR,LLPAR) 
      REAL*4  :: ARRAY_ALB(IIPAR_ALB,JJPAR_ALB)


C-------------------------------------------------------------------------
C Observations
C-------------------------------------------------------------------------

C Satellite instrument
      REAL*4 SZA(NVALMAX)                   ! Solar Zenith Angle
      REAL*4 LOSZA(NVALMAX)                 ! Satellite viewing angle
      REAL*4 RELAZM(NVALMAX)                ! Relative azimuth angle
      REAL*4 FCLD(NVALMAX)                  ! Cloud fraction (%)
      REAL*4 PCLD(NVALMAX)                  ! Cloud top pressure (hPa)
      REAL*4 OLATS(NVALMAX)                 ! Latitude of pixel center
      REAL*4 OLONS(NVALMAX)                 ! Longitude of pixel center
      REAL*4 TCOT(NVALMAX)                  ! Cloud optical thickness
      REAL*8 RSZA, RVZA, RCOT, RPCLD, RFCLD
      LOGICAL LAMBERTIAN_CLOUDS
      REAL FPS(NVALMAX)                  !Fresco Surface Pressure
      LOGICAL FLAG(NVALMAX)		 !Satellite flag, do not use measurement

      ! To pass along extra satellite information to output:
      CHARACTER(LEN=200):: outSuffix(NVALMAX)  ! A string to pass on data from satellite file to AMF output
      CHARACTER(LEN=100):: outPrefix(NVALMAX)  ! A string to pass on data from satellite file to AMF output

      INTEGER MAXLINE		!Number of measurements read in


C Climatologies
      REAL*8 SPIN(NVALMAX)      ! Surface pressure
      REAL*8 SAIN(NVALMAX)      ! Surface albedo
      REAL*4 RSPIN, RSAIN
      REAL*8 AIRMIX(LLPAR)      ! Equal to 1 everywhere


C-------------------------------------------------------------------------
C AMF database
C-------------------------------------------------------------------------

      INTEGER IUSE, JUSE, IUSE_ALB, JUSE_ALB
      REAL*8 KHAT(NVALMAX,LLPAR)        ! Clear sky scattering weights
      REAL*8 ACLR		! Clear sky albedo
      REAL*8 ACLD		! Cloudy sky albedo
      REAL*8 KHATCLD(LLPAR)     ! Cloudy sky scattering weights
      REAL*8 S(NVALMAX,LLPAR)      			     	! Shape factors
      REAL*8 AIRSIGMA, TGSIGMA, TMPSIGMA, WEIGHT
      REAL*8 AMF(NVALMAX), AMFCLD(NVALMAX), AMFCLR(NVALMAX)	!Air Mass Factors
      REAL*8 TRAD, WCLR(NVALMAX), WCLD(NVALMAX)			!Clear vs Cloudy Weights
      REAL*8 DSIGMA(LLPAR)
      
      REAL*8 SCATCLD (LLPAR)            ! Cloud sky scattering weights
      REAL*8 SCATCLR (LLPAR)            ! Clear sky scattering weights
      REAL*8 WSCAT(NVALMAX,LLPAR)       ! Total Scattering Weight

      REAL*4 AMFgeo(NVALMAX)     !Geometric Air Max Factor
      REAL*4 htopatm, eps, xh    !Use to calculate AMFgeo

C------------------------------------------------------------------------
C Model Inputs
C------------------------------------------------------------------------

      REAL*8 TGMIX(LLPAR)       ! Trace gas mixing ratio
      REAL*8 AERPROF(LLPAR,NAER)  ! Aerosol profile


C-----------------------------------------
C   Some Physical constants
C-----------------------------------------
      REAL,PARAMETER    :: MA     =0.02897     ! Molecular weight of air kg/mol.
      REAL,PARAMETER    :: AVGRAD =6.022D23      ! Avagadro's number
      REAL,PARAMETER    :: G      =9.8065
      REAL,PARAMETER    :: EarthRadius = 6.3785e6
      REAL,PARAMETER    :: pi          = 3.1415927

C------------------------------------------
C Other
C------------------------------------------
      INTEGER STATUS_INPUTREAD      !Check lidort input success
      INTEGER SLEN                  !Length of filename
      LOGICAL :: FIRSTCALL=.TRUE.   !Signal for first call of AMF LUT subroutines


C=========================================================================
C
C  Begin Data Input
C
C=========================================================================
      print*,"Debug pont 0"
      call flush(5)

C-------------------------------------------------------------------------
C User input 
C-------------------------------------------------------------------------
      READ ( 5, '(A)' ) SATFILE  ! File containing slant columns
      READ ( 5, '(A)' ) CLDFILE   ! File containing cloud data
      READ ( 5, *     ) DAYNO     ! Day of month
      READ ( 5, '(A)' ) TG_FILE  ! File containing trace gas profiles
      READ ( 5, '(A)' ) AEROSOL_FILE   ! File containing aerosol profiles
      READ ( 5, '(A)' ) TROPO_FILE ! File containing tropopause height
      READ ( 5, '(A)' ) OUTFILE   ! Output file
      READ ( 5, '(A)' ) OUTFILE_WSCAT !Output file for scattering weights
      READ ( 5, '(A)' ) OUTFILE_Shape !Output file for profile shapes
      READ ( 5, *     ) YR
      READ ( 5, *     ) MONTH
      READ ( 5, *     ) TG_TYPE
      READ ( 5, *     ) FRESCOv5
      
C      print*,SATFILE  ! File containing slant columns
C      print*,CLDFILE   ! File containing cloud data
C      print*,DAYNO     ! Day of month
C      print*,TG_FILE  ! File containing trace gas profiles
C      print*,AEROSOL_FILE   ! File containing aerosol profiles
C      print*,TROPO_FILE ! File containing tropopause height
C      print*,OUTFILE   ! Output file
C      print*,OUTFILE_WSCAT !Output file for scattering weights
C      print*,OUTFILE_Shape !Output file for profile shapes
C      print*,YR
C      print*,MONTH
C      print*,TG_TYPE
C      print*,FRESCOv5
C      call flush(5)
C
C      stop

#if defined ( USELUT )
!-------------------------------------------------------------------------
! On start: read air-mass factor lookup table
!-------------------------------------------------------------------------

      IF ( FIRSTCALL ) THEN
         CALL ReadAmfLut
         FIRSTCALL = .FALSE.
      ENDIF
#endif


C-------------------------------------------------------------------------
C Satellite-specific settings
C-------------------------------------------------------------------------

#if defined ( GOME )
      YR = YR + 1990
#endif

#if defined ( GOME ) || defined ( NEW_GOME )
      LAMBERTIAN_CLOUDS = .FALSE.
#else 
      LAMBERTIAN_CLOUDS = .TRUE.
#endif

C-------------------------------------------------------------------------
C Keep TAU_IN constant
C-------------------------------------------------------------------------
       TAU_IN = GET_TAU0_6A( MONTH, DAYNO, YR )

C-------------------------------------------------------------------------
C Read the trace gas mixing ratio from the binary punch file
C-------------------------------------------------------------------------
      PRINT*,"DEBUG POINT A"
      CALL flush(5)
      IF (TG_TYPE .EQ. 0) THEN
         TRACER_IN   = 20	! HCHO
         CATEGORY_IN = 'IJ-AVG-$'
      ELSE
#if defined ( GOME )
         TRACER_IN   = 23       ! NO2
#else
         TRACER_IN   = 64!25  	! NO2	
#endif
         CATEGORY_IN = 'IJ-AVG-$'!'TIME-SER'
      ENDIF

      print*,'Debug (2)'
      print*,tg_file, category_in, tracer_in, tau_in
      print*,iipar,jjpar,llpar
      call flush(5)

      CALL READ_BPCH2( TG_FILE, CATEGORY_IN, TRACER_IN, TAU_IN,  
     &                 IIPAR,    JJPAR,       LLPAR,     ARRAY )
      WRITE(6,*) '=================================
     &================================='
      call flush(5)
      TG(:,:,:) = ARRAY(:,:,:)

      print*,'debug (3)'
      call flush(5)

C-------------------------------------------
C Surface Pressure
C-------------------------------------------
      print*,"MAIN: Surface Pressure"
      call flush(5)
      TRACER_IN = 1
      CATEGORY_IN = 'PEDGE-$'

      CALL READ_BPCH2( TG_FILE, CATEGORY_IN, TRACER_IN, TAU_IN,  
     &                 IIPAR,    JJPAR,       LLPAR,     ARRAY )
      WRITE(6,*) '=================================
     &================================='
      PS(:,:) = ARRAY(:,:,1)

C-------------------------------------------
C Temperature
C-------------------------------------------
      TRACER_IN = 3
      CATEGORY_IN = 'DAO-3D-$'

      CALL READ_BPCH2( TG_FILE, CATEGORY_IN, TRACER_IN, TAU_IN,  
     &                 IIPAR,    JJPAR,       LLPAR,     ARRAY )
      WRITE(6,*) '=================================
     &================================='
      TMP(:,:,:) = ARRAY(:,:,:)

CC-------------------------------------------------------------------------
CC Read the aerosol profiles from the binary punch file
CC Skip this step if using Look Up Table
CC-------------------------------------------------------------------------
C      !Skip if using look up table
C#if defined ( NOUSELUT ) 
C#if defined ( GOME )
C      TAU_IN = GET_TAU0_2A( MONTH, YR )
C#endif
C      CATEGORY_IN = 'OD-MAP-$'
C
C      DO N = 1, NAER
C        TRACER_IN   = IND(N)
C
C        CALL READ_BPCH2( AEROSOL_FILE, CATEGORY_IN, TRACER_IN, TAU_IN,  
C     &                   IIPAR,    JJPAR,       LLPAR,     ARRAY )
C        WRITE(6,*) '=================================
C     &================================='
C        ARSL(:,:,:,N) = ARRAY(:,:,:)
C      ENDDO
C
CC     Add coarse sea-salt OD to accum sea-salt OD
C      TRACER_IN = 18
C      CALL READ_BPCH2( AEROSOL_FILE, CATEGORY_IN, TRACER_IN, TAU_IN,  
C     &                 IIPAR,    JJPAR,       LLPAR,     ARRAY )
C      ARSL(:,:,:,NAER) = ARSL(:,:,:,NAER) + ARRAY(:,:,:)
C
CC To turn off aerosol correction, uncomment the following line
CC     ARSL(:,:,:,:) = 0.0D0
C
CC-------------------------------------------------------------------------
CC Read the aerosol parameters
CC-------------------------------------------------------------------------
C      OPEN ( FILE = 'jv_spec.dat', UNIT = LUN,
C     &     FORM = 'FORMATTED', STATUS = 'OLD')
C      READ(LUN,*)  !Header
C      DO N = 1, NAER+1
C        READ(LUN,*) !Aerosol label
C        DO I = 1, NWL
C          READ(LUN,*) WL(I),QEXT(I,N),RAA(I,N),ASSA(I,N),
C     &                (PHFCN(J,I,N),J=0,7)
C        ENDDO
C      ENDDO
C      CLOSE ( LUN )
C#endif   ! End section to skip if using look up table
C
CC-------------------------------------------------------------------------
CC Read in UV surface albedos 
CC USE TOMS surface albedos (~360 nm) for HCHO
CC and Satellite surface albedos (~440 nm) for NO2
CC-------------------------------------------------------------------------
C      IF (TG_TYPE .EQ. 0) THEN
C#if   defined( GRID4x5 )
C        TG_FILE = 
C     &    '/data/ctm/GEOS_4x5/uvalbedo_200111/uvalbedo.geos.4x5'
C#elif defined( GRID2x25 ) 
C        TG_FILE = 
C     &    '/data/ctm/GEOS_2x2.5/uvalbedo_200111/uvalbedo.geos.2x25'
C#endif
C      ELSE
C
C      !GOB implementation of 1x1 albedos
C#if   defined( GOME1x1 )
C        TG_FILE = 'ALBEDO/ler440.generic.1x1'
C#elif defined( GOME2x25 )
C        TG_FILE = 'ALBEDO/ler440.geos.2x25'
C#elif defined( GOME4x5 )
C        TG_FILE = 'ALBEDO/ler440.geos.4x5'
C#elif defined( OMI1x1 )
C        TG_FILE = 'ALBEDO/OMLER440.generic.1x1'
C#elif defined( OMI2x25 )
C        TG_FILE = 'ALBEDO/OMLER440.geos.2x25'
C#elif defined( OMI4x5 )
C        TG_FILE = 'ALBEDO/OMLER440.geos.4x5'
C#else
C        TG_FILE = 'ALBEDO/ler440.geos.' // GET_RES_EXT()
C#endif
C      ENDIF
C
C      CALL READ_BPCH2( TG_FILE, 'UVALBEDO', 1, TAU_VAL( MONTH ),
C     &                 IIPAR_ALB,     JJPAR_ALB,     1, ARRAY_ALB )
C      ALBD(:,:) = ARRAY_ALB(:,:)
C
CC-------------------------------------------
CC Tropopause level
CC-------------------------------------------
C      CATEGORY_IN = 'TR-PAUSE'
CC      TAU_IN = GET_TAU0_6A( MONTH, 1, YR )
C      TAU_IN = GET_TAU0_6A(MONTH , DAYNO, YR )
C
C      TG_FILE = TRIM(TROPO_FILE)
C
C      CALL READ_BPCH2( TG_FILE, CATEGORY_IN, 1, TAU_IN,  
C     &                 IIPAR,    JJPAR,       1,     ARRAY(:,:,1) )
C      WRITE(6,*) '============================
C     &======================================'
C      TRPAUSE(:,:) = ARRAY(:,:,1)
C
CC-------------------------------------------------------------------------
CC Read in slant columns
CC-------------------------------------------------------------------------
C
CC  Read LIDORT input file
CC  ======================
C        CALL LIDORT_V23E_INPUT
C     &     ( 'amfgas_lidortinput.vza',
C     &        'ACTIVEGAS_ERRORFILE', STATUS_INPUTREAD )
C        IF ( STATUS_INPUTREAD .NE. LIDORT_SUCCESS ) THEN
C          STOP' Problems encountered with input read'
C        ENDIF
C
CC  read USA ML atmosphere
C        OPEN(1,FILE='usaml_ztp.dat',STATUS='OLD')
C        DO J = 1, NUSAML
C          J00 = NUSAML - J + 1
C          READ(1,*)USAML_ZZZ(J00),USAML_TTT(J00),USAML_PPP(J00)
C          USAML_LNP(J00) = DLOG(USAML_PPP(J00))
C        ENDDO
C        CLOSE(1)
C
CC-------------------------------
CC Read in Satellite Information
CC-------------------------------
C
C#if defined ( GOME )
C       CALL input_GOME(SATFILE,TG_TYPE,OLATS,OLONS,SZA,
C     &                   LOSZA,RELAZM,PCLD,FCLD,TCOT,
C     &                   MAXLINE,outPrefix,outSuffix,flag)
C#endif
C
C#if defined ( NEW_GOME )
C       CALL input_newGOME(SATFILE,TG_TYPE,OLATS,OLONS,SZA,
C     &                   LOSZA,RELAZM,PCLD,FCLD,TCOT,
C     &                   MAXLINE,outPrefix,outSuffix,flag)
C#endif
C
C#if defined ( SCIA )
C       CALL input_SCIA(SATFILE,TG_TYPE,FRESCOv5,OLATS,OLONS,SZA,
C     &                   LOSZA,RELAZM,PCLD,FCLD,FPS,
C     &                   MAXLINE,outPrefix,outSuffix,flag)
C#endif
C
C#if defined ( OMI )
C      CALL input_OMI(SATFILE,TG_TYPE,CLDFILE,OLATS,OLONS,SZA,
C     &                   LOSZA,RELAZM,PCLD,FCLD,
C     &                   MAXLINE,outPrefix,outSuffix,flag)
C#endif
C
C
C      SLEN = INDEX ( SATFILE, ' ' ) - 1
C      WRITE(6,*) 'Read in', MAXLINE, 'observations from ', 
C     &     SATFILE(1:SLEN)
C
C
CC==================================================
CC
CC  Begin AMF Calculation
CC
CC==================================================
C
C      DO LINE = 1,MAXLINE
C
C        if (mod(line,1000)==1) then
C            write(*,*) line
C	end if
C
C#if defined ( USELUT )
C         ! Skip AMF computation for data incompatible with LUT code
C
C          if ( (SZA(line) .gt. 84)        !GOB Added so LUT code won't crash
C     &      .or. (SZA(LINE) .lt. 1) ) then
C            AMF   (LINE) = -1.0D30
C            AMFCLR(LINE) = -1.0D30
C            AMFCLD(LINE) = -1.0D30
C            CONTINUE
C          end if
C#endif
C
C
CC     Determine the model grid cell the observation falls in
C         IF (OLONS(LINE) .LT. IMAX) THEN
C           IUSE = 1+(OLONS(LINE)-IMIN)/DISIZE
C         ELSE
C           IUSE = 1+(OLONS(LINE)-IMAX)/DISIZE
C         ENDIF
C
C         IF (OLATS(LINE) .LT. JMIN) THEN
C           JUSE = 1
C         ELSE 
C           JUSE = 2+(OLATS(LINE)+JMAX)/DJSIZE
C         ENDIF
C
C        !GOB Implementation of albedos maps
C#if     defined( OMI4x5 ) || defined( GOME4x5 ) || defined( OMI2x25 ) || defined( GOME2x25 )
C         IF (OLONS(LINE) .LT. IMAX_ALB) THEN
C           IUSE_ALB = 1+(OLONS(LINE)-IMIN_ALB)/DISIZE_ALB
C         ELSE
C           IUSE_ALB = 1+(OLONS(LINE)-IMAX_ALB)/DISIZE_ALB
C         ENDIF
C
C         IF (OLATS(LINE) .LT. JMIN_ALB) THEN
C           JUSE_ALB = 1
C         ELSE
C           JUSE_ALB = 2+(OLATS(LINE)+JMAX_ALB)/DJSIZE_ALB
C         ENDIF
C
C#elif   defined( OMI1x1 ) || defined( GOME1x1 )
C        !GOB Implementation of albedos maps
C         IF (OLONS(LINE) .LT. IMAX_ALB) THEN
C           IUSE_ALB = 1+(OLONS(LINE)-IMIN_ALB)/DISIZE_ALB
C         ELSE
C           IUSE_ALB = 1+(OLONS(LINE)-IMAX_ALB)/DISIZE_ALB
C         ENDIF
C
C         IF (OLATS(LINE) .EQ. JMAX_ALB) THEN
C           JUSE_ALB = (OLATS(LINE)+JMAX_ALB)/DJSIZE_ALB
C         ELSE
C	   JUSE_ALB = 1+(OLATS(LINE)+JMAX_ALB)/DJSIZE_ALB
C         ENDIF
C#else
C         IUSE_ALB=IUSE;
C         JUSE_ALB=JUSE;
C#endif
C
C
C            IF ( SUM(TG(IUSE,JUSE,:)) .GT. 0.0D0 ) THEN
C             IF ( PCLD(LINE) .GT. 0.0 ) THEN
C
C               IF (FRESCOv5 .EQ. 1) THEN
C                  SPIN(LINE) = FPS(LINE)
C               ELSE
C                  SPIN(LINE)  = PS(IUSE,JUSE)
C               ENDIF
C
C
CC Albedos range from 0-1
C               SAIN(LINE)   = ALBD(IUSE_ALB,JUSE_ALB)
C
CC Aerosol profile
C               AERPROF(:,:) = ARSL(IUSE,JUSE,:,:)
C
CC------------------------------------------------------------------
CC Calculate Eta Levels for GEOS_4 or GEOS_5
CC------------------------------------------------------------------
C#if   defined( GEOS_4 ) || defined( GEOS_5 )
C               MSIGMAE(1) = ETA_A(1)/SPIN(LINE) + ETA_B(1)
C               DO LEV = 1, LLPAR-1
C                 MSIGMAE(LEV+1) = ETA_A(LEV+1)/SPIN(LINE) + ETA_B(LEV+1)
C                 MSIGMA(LEV) = (MSIGMAE(LEV) + MSIGMAE(LEV+1) ) / 2.0d0
C               ENDDO
C               MSIGMAE(LLPAR+1) = 0.0d0
C               MSIGMA(LLPAR)=(MSIGMAE(LLPAR)+MSIGMAE(LLPAR+1) )/2.0d0
C#endif
C
C
CC------------------------------------------------------------------
CC Mixing ratio for air and Trace Gas
CC------------------------------------------------------------------
C               DO LEV = 1, LLPAR
C                  AIRMIX(LEV) = 1.0D0
C                  TGMIX(LEV) = TG(IUSE,JUSE,LEV)
C               ENDDO
C
CC Change from REAL*4 to REAL*8
C               RSZA = SZA(LINE)
C               RVZA = ABS(LOSZA(LINE))
C               RCOT = TCOT(LINE)
C               RPCLD = PCLD(LINE)
C               RSPIN = SPIN(LINE)
C               RSAIN = SAIN(LINE)
C
C               if (RPCLD .gt. RSPIN) then   !(GOB) move clouds up to surface
C		   RPCLD = RSPIN
C	       end if
C
C
C!------------------------------------------------------------------
C! Geometric AMF calculation
C!
C! From Carsten Leue, thesis:
C!     AMFgeo = (1.0/cos(pi*vza/180.0)) + (1.0/cos(pi*sza/180.0))
C!
C! NOTE: the AMF lookup table contains AMF/AMFgeo, where
C!         AMFgeo has exactly the same form as here!
C!------------------------------------------------------------------
C
C               htopatm = 60.0   ! km
C
C               eps     = htopatm * 1000.0 / EarthRadius
C
C               xh      = sqrt( cos(pi * SZA(LINE) / 180.0)**2 +
C     &              eps**2 + 2.*eps )
C
C               AMFgeo(LINE)  = 1.0 / cos( pi * LOSZA(LINE) / 180.0 ) +
C     &              ( xh - cos( pi * SZA(LINE) / 180.0 ) ) / eps
C
C
C#if defined ( USELUT )
CC------------------------------------------------------------------
CC Call to read weighting kernels from Look Up Table
CC------------------------------------------------------------------
C               CALL LUT_USE( RSPIN, RSAIN,
C     &                       SZA(LINE), LOSZA(LINE), RELAZM(LINE),
C     &                       AMFgeo(LINE), TRPAUSE(IUSE,JUSE),
C     &                       PCLD(LINE), KHAT(LINE,:), KHATCLD, ACLR, ACLD)
C
C#else
C
CC------------------------------------------------------------------
CC If not using look up table call lidort code
CC Get weighting kernel for clear sky case
CC------------------------------------------------------------------
C               
C               CALL RLIDORT(SPIN(LINE),SAIN(LINE),
C     &              RSZA,TG_TYPE,0.0D0,900.0D0,
C     &              TGMIX,KHAT(LINE,:),ACLR,RVZA,
C     &              AERPROF,.FALSE.)
C
CC------------------------------------------------------------------
CC Get weighting kernel for cloudy case 
CC------------------------------------------------------------------
C               CALL RLIDORT(SPIN(LINE),SAIN(LINE),
C     &              RSZA,TG_TYPE,RCOT,RPCLD,
C     &              TGMIX,KHATCLD,ACLD,RVZA,
C     &              AERPROF,LAMBERTIAN_CLOUDS)
C
CC              write(*,'(5f8.3)') ACLR, ACLD, RPCLD
C#endif
C
C
CC-------------------------------------------------------------------
CC Compute total column of air, Trace Gas, TG Weighted Mean Temperature
CC------------------------------------------------------------------
C               AIRSIGMA = 0.0D0
C               DO LEV = 1, LLPAR
C                  DSIGMA(LEV) = MSIGMAE(LEV) - 
C     &                 MSIGMAE(LEV+1)
C                  AIRSIGMA = DSIGMA(LEV)*AIRMIX(LEV) + AIRSIGMA
C               ENDDO
C
C                     
C               TGSIGMA = 0.0D0
C               TMPSIGMA = 0.0D0
C               DO LEV = 1, TRPAUSE(IUSE,JUSE)-1
C                  WEIGHT = DSIGMA(LEV)*TGMIX(LEV)
C                  TGSIGMA = WEIGHT + TGSIGMA
C                  TMPSIGMA = WEIGHT*TMP(IUSE,JUSE,LEV) + TMPSIGMA
C               ENDDO
C
C
CC------------------------------------------------------------------
CC Compute S function
CC------------------------------------------------------------------
C               DO LEV = 1, TRPAUSE(IUSE,JUSE)-1
C                  IF ( TGMIX(LEV) .GT. 0.0D0 ) THEN
C                     S(LINE,LEV) = TGMIX(LEV)
C                     S(LINE,LEV) = S(LINE,LEV)/
C     &                    (TGSIGMA/AIRSIGMA)
C                  ELSE
C                     S(LINE,LEV) = 0.0D0
C                  ENDIF
C               ENDDO
C
CC Check that S integrates to unity - use AMF variable to check this
C               AMF(LINE) = 0.0D0
C               DO LEV = 1, TRPAUSE(IUSE,JUSE)-1
C                  AMF(LINE) = DSIGMA(LEV)*S(LINE,LEV) 
C     &                 + AMF(LINE)
C               ENDDO
C
CC Allow for numerical error (especially when using REAL precision)
C               IF ( AMF(LINE) .GT. 0.99 .AND. 
C     &              AMF(LINE) .LT. 1.01) THEN
C               ELSE
C                  WRITE(6,*) 'Problem with model shape
C     &                         integrating to unity'
C                  WRITE(6,*) AMF(LINE)
C                  STOP
C               ENDIF
C
CC------------------------------------------------------------------
CC Compute air mass factor
CC Satellite is more sensitive to NO2 at colder temps so scale KHAT
CC   to account for this
CC------------------------------------------------------------------
C               AMFCLR(LINE) = 0.0D0
C               AMFCLD(LINE) = 0.0D0
C               
C               DO LEV = 1, TRPAUSE(IUSE,JUSE)-1
C                  IF (TG_TYPE .EQ. 1) THEN
C#if defined ( GOME )
CC Larger cross sections at 243K but spectral fit at 293K 
CC Slope of 0.2 determined by comparing results for fits at each temp
C                    WEIGHT = 1.0D0 + 0.2D0*(293.0D0-TMP(IUSE,JUSE,LEV))
C     &                       /(293.0D0-243.0D0)
C#else
CC Smaller cross sections at 293K but spectral fit at 243K 
C                    WEIGHT = 1.0D0 + 0.2D0*(243.0D0-TMP(IUSE,JUSE,LEV))
C     &                       /(293.0D0-243.0D0)
C#endif
C                  ELSE
C                    WEIGHT = 1.0D0 
C                  ENDIF
C
C                  AMFCLR(LINE) = (DSIGMA(LEV)*KHAT(LINE,LEV)*
C     &                 S(LINE,LEV)*WEIGHT) + AMFCLR(LINE)
C                   
C                   
C                  AMFCLD(LINE) = (DSIGMA(LEV)*KHATCLD(LEV)*
C     &                 S(LINE,LEV)*WEIGHT) + AMFCLD(LINE)
C                
C                  !Scattering Weights for Clear and Cloudy Skies calculated
C                  SCATCLR(LEV) = (DSIGMA(LEV)*KHAT(LINE,LEV)*WEIGHT)
C  
C                  SCATCLD(LEV) = (DSIGMA(LEV)*KHATCLD(LEV)*WEIGHT)
C
C                  ENDDO
C
CC Combine clear and cloudy Scattering weights
C               RFCLD = FCLD(LINE)
C
C#if defined ( GOME ) || defined ( SCIA ) || defined ( NEW_GOME )
C               RFCLD = 0.01D0*RFCLD ! OMI CLDRR cloud fraction 0-1
C#endif
C
C               ! estimated observed radiance (normalization factor)
C               TRAD = ACLR*(1.0D0-RFCLD) + ACLD*RFCLD
C
C               ! Radiance fraction from clear part of pixel
C               WCLR(LINE) = ACLR*(1.0D0-RFCLD)/TRAD
C
C               ! Radiance fraction from cloudy part of pixel
C               WCLD(LINE) = ACLD*RFCLD/TRAD
C
C               ! Total AMF weighted by cloud fraction and
C               ! radiation intensity
C                AMF(LINE) = AMFCLR(LINE)*WCLR(LINE) 
C     &              + AMFCLD(LINE)*WCLD(LINE)
C               
C              
C               AMF(LINE)= 0.0D0 
C               !Total Scattering weights calculated by weighting
C               !cloud fraction and radiation intensity
C               !AMF is calculated by integrating
C               DO LEV = 1, TRPAUSE(IUSE,JUSE)-1
C                  
C                            
C                  WSCAT(LINE,LEV)=(SCATCLD(LEV)*WCLD(LINE)
C     &                 +SCATCLR(LEV)*WCLR(LINE))/AMFgeo(LINE)
C               
C                  
C                  AMF(LINE)= (WSCAT(LINE,LEV)*S(LINE,LEV)*AMFgeo(LINE))+
C     &                 AMF(LINE)
C               ENDDO
C  
C
C               
C        
CC       write(*,'(5f8.3)') amfcld(line), amfclr(line), amf(line),
CC     &                     wcld(line), wclr(line), AMFgeo(line)
C
CC Compute vertical column
C               GEOS_VC(LINE) = ((AVGRAD*(SPIN(LINE)-PTOP))/
C     &              (G*MA) * TGSIGMA)/100.0D0
C
C
C            ENDIF               ! PCLD is > 0.0
C         ENDIF                  ! model TG is > 0.0
C      ENDDO
C      
C
CC-------------------------------------------------------------------------
CC Open main output file
CC-------------------------------------------------------------------------
C      OPEN ( FILE = OUTFILE,
C     &     UNIT = OLUN,
C     &     STATUS = 'UNKNOWN',
C     &     FORM = 'FORMATTED' )
C
C      IF ( MAXLINE==0 ) THEN
C         WRITE( 6, * ) '==No suitable observations found=='
C      ELSE
C         DO LINE = 1, MAXLINE
C           IF ((AMFCLD(LINE).LT.9.9D0) .AND. (AMFCLR(LINE).LT.9.9D0)
C     &     .AND. (AMFCLD(LINE).GE.0.0D0) .AND. (AMFCLR(LINE).GT.0.0D0)
C     &     .AND. (AMF(LINE).GT.0.0D0) .AND. (AMF(LINE).LT.9.9D0)) THEN
C              
C               WRITE(OLUN,'(a12,2f7.2,4f9.3,6f8.3, f7.4, e11.3,a20)')
C     &                 outPrefix(LINE),
C     &                 SZA(LINE),
C     &                 LOSZA(LINE),
C     &                 FCLD(LINE),    !DFCLD(LINE),
C     &                 PCLD(LINE),    !DPCLD(LINE),
C     &                 SPIN(LINE), SAIN(LINE),
C     &                 OLATS(LINE), OLONS(LINE),
C     &                 AMFCLD(LINE), AMFCLR(LINE),
C     &                 AMF(LINE), AMFgeo(LINE),
C     &                 WCLD(LINE),
C     &                 GEOS_VC(LINE),
C     &                 outSuffix(LINE)
C           ENDIF
C        ENDDO
C      ENDIF
C
C      CLOSE ( OLUN ) ! Close output file
C
C
CC   Don't ouput shape factor and scatering weights for OMI
C#if defined ( GOME ) || defined ( SCIA ) || defined ( NEW_GOME )
C
CC-------------------------------------------------------------------------
CC Open output file - for WSCAT
CC-------------------------------------------------------------------------
C      OPEN ( FILE = OUTFILE_WSCAT,
C     &     UNIT = OLUN,
C     &     STATUS = 'UNKNOWN',
C     &     FORM = 'FORMATTED' )
C
C      IF ( MAXLINE .ne. 0 ) THEN
C         DO LINE = 1, MAXLINE
C           IF ((AMFCLD(LINE).LT.9.9D0) .AND. (AMFCLR(LINE).LT.9.9D0)
C     &     .AND. (AMFCLD(LINE).GE.0.0D0) .AND. (AMFCLR(LINE).GT.0.0D0)
C     &     .AND. (AMF(LINE).GT.0.0D0) .AND. (AMF(LINE).LT.9.9D0)) THEN
C
C
C             WRITE(OLUN,'(a12, 47f9.5)')
C     &          outPrefix(LINE), KHAT(LINE,:)
C
C           ENDIF
C         ENDDO
C      ENDIF
C
C      CLOSE ( OLUN ) ! Close output file
C
CC-------------------------------------------------------------------------
CC Open output file - for shape factors
CC-------------------------------------------------------------------------
C      OPEN ( FILE = OUTFILE_Shape,
C     &     UNIT = OLUN,
C     &     STATUS = 'UNKNOWN',
C     &     FORM = 'FORMATTED' )
C
C      IF ( MAXLINE .ne. 0 ) THEN
C         DO LINE = 1, MAXLINE
C           IF ((AMFCLD(LINE).LT.9.9D0) .AND. (AMFCLR(LINE).LT.9.9D0)
C     &     .AND. (AMFCLD(LINE).GE.0.0D0) .AND. (AMFCLR(LINE).GT.0.0D0)
C     &     .AND. (AMF(LINE).GT.0.0D0) .AND. (AMF(LINE).LT.9.9D0)) THEN
C
C             WRITE(OLUN,'(a12, 30e15.8)')
C     &          outPrefix(LINE), S(LINE,:)
C
C           ENDIF
C         ENDDO
C      ENDIF
C
C      CLOSE ( OLUN ) ! Close output fil
C#endif

      STOP
      END
